"```ngMeta\nname: Bagels\nsubmissionType: url\n```\n\nIn this exercise, you\u2019ll learn a few new methods and functions that come with Python. You\u2019ll also learn about augmented assignment operators and string interpolation. These things don\u2019t let you do anything you couldn't do before, but they are nice shortcuts to make coding easier.\n\nBagels is a deduction game you can play with a friend. Your friend thinks up a random 3-digit number with no repeating digits, and you try to guess what the number is. After each guess, your friend gives you three types of clues:\n\n1. **Bagels** \u2013 None of the three digits you guessed is in the secret number.\n2. **Pico** \u2013 One of the digits is in the secret number, but your guess has the digit in the wrong place.\n3. **Fermi** \u2013 Your guess has a correct digit in the correct place.\n\nYou can get multiple clues after each guess. If the secret number is 456 and your guess is 546 the clues would be \u201cfermi pico pico\u201d. The 6 provides \u201cfermi\u201d and the 5 and 4 provide \u201cpico pico\u201d.\n\nTopics covered\n\n* function returning the wrong value\n* typeconversion problems\n\n```python\nimport random\ndef getSecretNum(numDigits):\n# Returns a string that is numDigits long, made up of unique random digits.\n  numbers = list(range(10))\n  random.shuffle(numbers)\n  secretNum = ''\n  for i in range(numDigits):\n    secretNum += (numbers[i])\n  print secretNum\n\ndef getClues(guess, secretNum):\n# Returns a string with the pico, fermi, None clues to the user.\n  if guess == secretNum:\n    return 'You got it!'\n  clue = []\n  for i in range(len(guess)):\n    if guess[i] == secretNum[i]:\n      clue.append('Fermi')\n    elif guess[i] in secretNum:\n      clue.append('Pico')\n    if len(clue) == 0:\n      return 'None'\n  return ' '.join(clue)\n\ndef isOnlyDigits(num):\n# Returns True if num is a string made up only of digits. Otherwise returns False.\n  if num = '':\n    return False\n\n  for i in num:\n    if i not in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:\n      return False\n\ndef playAgain():\n# This function returns True if the player wants to play again, otherwise it returns False.\n  play = raw_input(\"Do you want to play again? Yes or No?\") \n  return play.lower.startswith('y')\n\nNUMDIGITS = 3\nMAXGUESS = 10\n\nprint('I am thinking of a %s-digit number. Try to guess what it is.' % (NUMDIGITS))\nprint('Here are some clues:')\nprint('When I say:    That means:')\nprint('  Pico         One digit is correct but in the wrong position.')\nprint('  Fermi        One digit is correct and in the right position.')\nprint('  None       No digit is correct.')\n\nwhile True:\n  secretNum = getSecretNum(NUMDIGITS)\n  print('I have thought up a number. You have %s guesses to get it.' % (MAXGUESS))\n  numGuesses = 1\n  while numGuesses <= MAXGUESS:\n    while len(guess) != NUMDIGITS or not isOnlyDigits(guess):\n      print 'Guess' + (numGuesses)\n      guess = raw_input(\"Guess Again\")\n\n    clue = getClues(guess, secretNum)\n    print(clue)\n    numGuesses += 1\n    if guess == secretNum:\n      break\n    if numGuesses < MAXGUESS:\n      print 'You ran out of guesses. The answer was ' + secretNum\n  if not playAgain:\n    break\n    \n```\n"